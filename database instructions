
--mode column; set the flag to enable tabular output with one row per line
.mode column
.header on

--example formatting time
--SELECT time(Users.lastlogin,'unixepoch') AS lastlogin_time from Users;
--SELECT datetime(lastLogin,'unixepoch') AS lastlogin_datetime from Users;
--SELECT date(lastLogin,'unixepoch') AS lastlogin_date from Users;

--open the AdaTweets database
.print "opening database, or creating if not found"
.open "./db/adaboard.db"

--enable foreign key cascades
.print "enabling sqlite foreign key services"
PRAGMA foreign_keys = true;

.shell clear

.print "dropping users (if exist)"
DROP TABLE IF EXISTS Messages;
DROP TABLE IF EXISTS Users;

.print "requirement a-01: creating user table (if not exist)"
CREATE TABLE IF NOT EXISTS "Users" (
    "userid" INTEGER NOT NULL,
  	"friendlyname" VARCHAR(50),
  	"emailaddress" VARCHAR(320) NOT NULL UNIQUE,
		"password" VARCHAR(256) NOT NULL,
    "admin" INTEGER(1),
		"lastlogin" INTEGER(4) DEFAULT (strftime('%s','now')), --CURRENT_TIMESTAMP
    PRIMARY KEY ("userID")
);

.print "requirement a-02: creating messages table (if not exist)"
CREATE TABLE IF NOT EXISTS "Messages" (
	"id" INTEGER NOT NULL,
	"message" TEXT, --approx 1gb in size; depending
	"userid" INTEGER, --although not specified in the schema students should ensure this is not null
	"created" INTEGER(4)DEFAULT (strftime('%s','now')), --CURRENT_TIMESTAMP
	"archive" INTEGER(1) DEFAULT 0,
	PRIMARY KEY ("id"),
	FOREIGN KEY("userid") REFERENCES "Users" ("userid") --although not specified in the schema students should ensure this is ON DELETE CASCADE
);

.print "requirement a-03: creating friendlyname index (if not exist)"
CREATE INDEX IF NOT EXISTS "friendlyname_idx" ON "Users" ("friendlyname");


--lets double check what we have
.print ""
.print "current user schema"
.schema Users

.print ""
.print "current messaqe schema"
.schema Messages
.print ""

-- to do this they will need to strip any unsuitable formatting, add missing details and mark admin and last login status
.print "requirement b-04: inserting user accounts"
INSERT INTO Users ( userid, friendlyname, emailaddress, password, admin, lastlogin ) 
VALUES 
(1000, "Abraham Lincoln", "abraham@ada.ac.uk", "--blank--", 1, 0),
(1001, "Anne Frank", "anne@ada.ac.uk", "--blank--", 0, 0),
(1002, "Aristotle", "aristotle@ada.ac.uk", "--blank--", 0, 0),
(1003, "Benjamin Franklin", "benjamin@ada.ac.uk", "--blank--", 0, 0),
(1004, "Confucius", "confucius@ada.ac.uk", "--blank--", 0, 0),
(1005, "Eleanor Roosevelt", "eleanor@ada.ac.uk", "--blank--", 0, 0),
(1006, "Franklin D. Roosevelt", "franklin@ada.ac.uk", "--blank--", 0, 0),
(1007, "Kamala Harris", "kamala@ada.ac.uk", "--blank--", 1, 0),
(1008, "Mark Twain", "mark@ada.ac.uk", "--blank--", 0, 0),
(1009, "Oprah Winfrey", "oprah@ada.ac.uk", "--blank--", 1, 0),
(1010, "Socrates", "socrates@ada.ac.uk", "--blank--", 0, 0),
(1011, "Steve Jobs", "steve@ada.ac.uk", "--blank--", 1, 0),
(1012, "Thomas A. Edison", "tom@ada.ac.uk", "--blank--", 0, 0),
(1013, "Thomas Jefferson", "thomas@ada.ac.uk", "--blank--", 0, 0),
(1014, "Alexei Navalny", "alexei@ada.ac.uk", "--blank--", 0, 0);

--display how many users in table
SELECT COUNT(userid) AS usersavailable FROM Users;

-- to do this they will need to strip any unsuitable formatted double quotes and replace with basic double quotes
-- convert the owner to the userid
-- ensure they add the archive flag due to the default standard and the issue of a pre-achived state
.print "requirement b-05: inserting message data"
INSERT INTO Messages ( message, userid, archive ) 
VALUES
("Always bear in mind that your own resolution to success is more important than any other one thing.", 1000, 0), 
("You know you are on the road to success if you would do your job and not be paid for it.", 1009, 0),
("If you really look closely, most overnight successes took a long time.", 1011, 0),
("How wonderful it is that nobody needs to wait a single moment before starting to improve the world.", 1001, 0),
("An unexamined life is not worth living.", 1010, 0),
("It does not matter how slowly you go as long as you do not stop.", 1004, 0),
("If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.", 1009, 0),
("First, have a definite, clear practical ideal, a goal, an objective. Second, have the necessary means to achieve your ends, wisdom, money, materials, and methods. Third, adjust all your means to that end.", 1002, 0),
("No one can make you feel inferior without your consent.", 1005, 0),
("Twenty years from now you will be more disappointed by the things that you didn't do than by the ones you did do. So, throw off the bowlines, sail away from safe harbours, catch the trade winds in your sails. Explore, Dream, Discover.", 1008, 0),
("The only limit to our realization of tomorrow will be our doubts of today.", 1006, 0),
("Don't throw stones at your neighbors, if your own windows are glass.", 1003, 0),
("Donâ€™t go around saying the world owes you a living. The world owes you nothing. It was here first.", 1008, 1),
("I find that the harder I work, the more luck I seem to have.", 1013, 0),
("Many of life's failures are people who did not realize how close they were to success when they gave up.", 1012, 0),
("Getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again. It freed me to enter one of the most creative periods of my life.", 1011, 0),
("Anyone who claims to be a leader must speak like a leader. That means speaking with integrity and truth.", 1007, 0),
("I am not afraid.", 1014, 0); 

--display how many users in table
SELECT COUNT(id) AS messagesavailable FROM Messages;



.print ""
.print "requirement c-06: selections"
.width 30, 5
SELECT friendlyname, admin FROM Users ORDER BY admin, friendlyname;


.print "requirement c-07: insert pre-achived, pre-dated"
INSERT INTO Messages ( userid, message, archive, created ) 
VALUES (1003, "I didn't fail the test. I just found 1000 ways to do it wrong.", 1, strftime('%s','now', '-2 months') );



------------------ test messages
.print ""
.width 5, 20, 5, 30, 24, 4
SELECT 
	Users.userid,
	friendlyname,
	id,
	message, 
	datetime(created,'unixepoch'),
	archive
FROM 
	Messages 
INNER JOIN
	Users ON Users.userid = Messages.userid
ORDER BY friendlyname;
.print ""
.print ""
------------------


.print ""
.print "requirement c-08: FK selections"
.width 20, 30, 24
SELECT 
	friendlyname,
	message, 
	datetime(created,'unixepoch')
FROM 
	Messages 
INNER JOIN
	Users ON Users.userid = Messages.userid
WHERE 
	Users.friendlyname LIKE "%franklin%" 
	AND archive = 0

ORDER BY created DESC;


.print ""
.print "requirement c-09: update"
UPDATE Users SET lastlogin = strftime('%s','now')
WHERE userid = 1011;


------------------ test users
.print ""
.width 5, 25, 25, 15, 5, 5, 20
SELECT 
	userid,
	friendlyname,
	emailaddress,
	password,
	admin,
	lastlogin,
	datetime(lastlogin,'unixepoch') AS timestamp
FROM 
	Users 
ORDER BY friendlyname;
.print ""
.print ""
------------------

.print ""
.print "requirement c-10: delete"
DELETE FROM Messages
WHERE 
archive = 1 AND
created < strftime('%s','now', '-30 days');


.print ""
.print "requirement c-11: foreign key update"
--UPDATE messages
--SET archive = 1 WHERE --only 1
--userid =
--(SELECT DISTINCT Users.userid FROM Users WHERE friendlyname = "Steve Jobs");
UPDATE messages
SET archive = 1 WHERE --multiple instances of matched friendlyname
userid IN
(SELECT Users.userid FROM Users WHERE friendlyname = "Steve Jobs");



------------------ test messages
.print ""
.width 5, 20, 5, 30, 24, 4
SELECT 
	Users.userid,
	friendlyname,
	id,
	message, 
	datetime(created,'unixepoch'),
	archive
FROM 
	Messages 
INNER JOIN
	Users ON Users.userid = Messages.userid
ORDER BY friendlyname;
.print ""
.print ""
------------------